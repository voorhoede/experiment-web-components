/* src/components/color-picker-svelte.html generated by Svelte v2.15.3 */

function hslToRgb(h, s, l){
  var r, g, b;

  if(s == 0){
      r = g = b = l; // achromatic
  }else{
      var hue2rgb = function hue2rgb(p, q, t){
          if(t < 0) t += 1;
          if(t > 1) t -= 1;
          if(t < 1/6) return p + (q - p) * 6 * t;
          if(t < 1/2) return q;
          if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
          return p;
      }

      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1/3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1/3);
  }

  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
}

function componentToHex(c) {
  var hex = c.toString(16);
  return hex.length == 1 ? "0" + hex : hex;
}

function data() {
  return {
    inputValue: 0,
    value: ''
  }
};

var methods = {
  onInput(event) {
    this.set({ inputValue: Number(event.target.value) })
    this.fire('input', {value: this.value})
  },
  onChange() {
    this.fire('change', {value: this.value})
  },
};

function oncreate() {
  const inputElement = this.refs.input.querySelector('input')
  const data = this.options.data || {}
  if (data.hasOwnProperty('hue')) {
    this.set({inputValue: Number(data.hue)})
  } else {
    this.set({inputValue: Number(inputElement.value)})
  }
};

function onstate({changed, current}) {
  if (changed.inputValue === true) {
    const [r, g, b] = hslToRgb(Number(current.inputValue) / 360 , 1, 0.5)
    const value = `#${componentToHex(r)}${componentToHex(g)}${componentToHex(b)}`
    this.set({value})
  }
};

function create_main_fragment(component, ctx) {
	var div2, div0, slot, text0, div1, text1, span, text2;

	function select_block_type(ctx) {
		if (ctx.hue) return create_if_block;
		return create_else_block;
	}

	var current_block_type = select_block_type(ctx);
	var if_block = current_block_type(component, ctx);

	function input_handler(event) {
		component.onInput(event);
	}

	function change_handler(event) {
		component.onChange(event);
	}

	return {
		c() {
			div2 = createElement("div");
			div0 = createElement("div");
			slot = createElement("slot");
			if_block.c();
			text0 = createText("\n  ");
			div1 = createElement("div");
			text1 = createText("\n  ");
			span = createElement("span");
			text2 = createText(ctx.value);
			this.c = noop;
			addListener(div0, "input", input_handler);
			addListener(div0, "change", change_handler);
			div1.className = "color-picker-svelte__output";
			setStyle(div1, "background-color", "hsl(" + ctx.inputValue + ", 100%, 50%)");
			div2.className = "color-picker-svelte";
		},

		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, slot);
			if_block.m(slot, null);
			component.refs.input = div0;
			append(div2, text0);
			append(div2, div1);
			append(div2, text1);
			append(div2, span);
			append(span, text2);
		},

		p(changed, ctx) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(changed, ctx);
			} else {
				if_block.d(1);
				if_block = current_block_type(component, ctx);
				if_block.c();
				if_block.m(slot, null);
			}

			if (changed.inputValue) {
				setStyle(div1, "background-color", "hsl(" + ctx.inputValue + ", 100%, 50%)");
			}

			if (changed.value) {
				setData(text2, ctx.value);
			}
		},

		d(detach) {
			if (detach) {
				detachNode(div2);
			}

			if_block.d();
			removeListener(div0, "input", input_handler);
			removeListener(div0, "change", change_handler);
			if (component.refs.input === div0) component.refs.input = null;
		}
	};
}

// (6:6) {:else}
function create_else_block(component, ctx) {
	var input;

	return {
		c() {
			input = createElement("input");
			setAttribute(input, "type", "range");
			input.min = "0";
			input.max = "360";
		},

		m(target, anchor) {
			insert(target, input, anchor);
		},

		p: noop,

		d(detach) {
			if (detach) {
				detachNode(input);
			}
		}
	};
}

// (4:6) {#if hue}
function create_if_block(component, ctx) {
	var input;

	return {
		c() {
			input = createElement("input");
			setAttribute(input, "type", "range");
			input.min = "0";
			input.max = "360";
			input.value = ctx.inputValue;
		},

		m(target, anchor) {
			insert(target, input, anchor);
		},

		p(changed, ctx) {
			if (changed.inputValue) {
				input.value = ctx.inputValue;
			}
		},

		d(detach) {
			if (detach) {
				detachNode(input);
			}
		}
	};
}

class color_picker_svelte extends HTMLElement {
	constructor(options = {}) {
		super();
		init(this, options);
		this.refs = {};
		this._state = assign(data(), options.data);
		this._intro = true;

		this._handlers.state = [onstate];

		this._slotted = options.slots || {};

		this.attachShadow({ mode: 'open' });
		this.shadowRoot.innerHTML = `<style>.color-picker-svelte{display:inline-flex}.color-picker-svelte__output{display:inline-block;width:2em;height:2em;background-color:red;margin-left:0.5em}</style>`;

		onstate.call(this, { changed: assignTrue({}, this._state), current: this._state });

		this._fragment = create_main_fragment(this, this._state);

		this.root._oncreate.push(() => {
			oncreate.call(this);
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		this._fragment.c();
		this._fragment.m(this.shadowRoot, null);

		if (options.target) this._mount(options.target, options.anchor);
	}

	static get observedAttributes() {
		return ["hue","inputValue","value"];
	}

	get hue() {
		return this.get().hue;
	}

	set hue(value) {
		this.set({ hue: value });
	}

	get inputValue() {
		return this.get().inputValue;
	}

	set inputValue(value) {
		this.set({ inputValue: value });
	}

	get value() {
		return this.get().value;
	}

	set value(value) {
		this.set({ value: value });
	}

	connectedCallback() {
		Object.keys(this._slotted).forEach(key => {
			this.appendChild(this._slotted[key]);
		});
	}

	attributeChangedCallback(attr, oldValue, newValue) {
		this.set({ [attr]: newValue });
	}

	connectedCallback() {
		flush(this);
	}
}

assign(color_picker_svelte.prototype, {
 	destroy: destroy,
 	get: get,
 	fire: fire,
 	on: on,
 	set: set,
 	_set: _set,
 	_stage: _stage,
 	_mount: _mount,
 	_differs: _differs
 });
assign(color_picker_svelte.prototype, methods);
assign(color_picker_svelte.prototype, {
	_mount(target, anchor) {
		target.insertBefore(this, anchor);
	}
});

customElements.define("color-picker-svelte", color_picker_svelte);

color_picker_svelte.prototype._recompute = noop;

function createElement(name) {
	return document.createElement(name);
}

function createText(data) {
	return document.createTextNode(data);
}

function noop() {}

function addListener(node, event, handler, options) {
	node.addEventListener(event, handler, options);
}

function setStyle(node, key, value) {
	node.style.setProperty(key, value);
}

function insert(target, node, anchor) {
	target.insertBefore(node, anchor);
}

function append(target, node) {
	target.appendChild(node);
}

function setData(text, data) {
	text.data = '' + data;
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function removeListener(node, event, handler, options) {
	node.removeEventListener(event, handler, options);
}

function setAttribute(node, attribute, value) {
	if (value == null) node.removeAttribute(attribute);
	else node.setAttribute(attribute, value);
}

function init(component, options) {
	component._handlers = blankObject();
	component._slots = blankObject();
	component._bind = options._bind;
	component._staged = {};

	component.options = options;
	component.root = options.root || component;
	component.store = options.store || component.root.store;

	if (!options.root) {
		component._beforecreate = [];
		component._oncreate = [];
		component._aftercreate = [];
	}
}

function assign(tar, src) {
	for (var k in src) tar[k] = src[k];
	return tar;
}

function assignTrue(tar, src) {
	for (var k in src) tar[k] = 1;
	return tar;
}

function flush(component) {
	component._lock = true;
	callAll(component._beforecreate);
	callAll(component._oncreate);
	callAll(component._aftercreate);
	component._lock = false;
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = noop;

	this._fragment.d(detach !== false);
	this._fragment = null;
	this._state = {};
}

function get() {
	return this._state;
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		var handler = handlers[i];

		if (!handler.__calling) {
			try {
				handler.__calling = true;
				handler.call(this, data);
			} finally {
				handler.__calling = false;
			}
		}
	}
}

function on(eventName, handler) {
	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	flush(this.root);
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	newState = assign(this._staged, newState);
	this._staged = {};

	for (var key in newState) {
		if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign(assign({}, oldState), newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		this.fire("state", { changed: changed, current: this._state, previous: oldState });
		this._fragment.p(changed, this._state);
		this.fire("update", { changed: changed, current: this._state, previous: oldState });
	}
}

function _stage(newState) {
	assign(this._staged, newState);
}

function _mount(target, anchor) {
	this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
}

function _differs(a, b) {
	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function blankObject() {
	return Object.create(null);
}

function callAll(fns) {
	while (fns && fns.length) fns.shift()();
}
export default color_picker_svelte;